/**
 *  @file      main.js
 *  @brief     Principal file
 *  @author    Created by Miakel Juillet
 *  @version   25.05.2023
 */

import { horizonAPIFilter } from './src/model/dataFilter.js';
import { GetAsteroid } from './src/controller/requests.js'
import { Renderer } from './src/model/classes/Renderer.js';
import { Planet } from './src/model/classes/Planet.js';
import { Moon } from './src/model/classes/Moon.js';
import { Asteroid } from './src/model/classes/Asteroid.js';

/** 
* Main function of teh project will be ussed first
*/
async function main() {

  const allPlanets = await import('./src/assets/AllPlanetsData-08-05-2023.json');
  let planetList = [];

  const moonGetted = allPlanets.moons[0];
  const filtredMoon = horizonAPIFilter(moonGetted);
  const moon = new Moon(
    filtredMoon.id,
    filtredMoon.name,
    filtredMoon.sizeRadius,
    filtredMoon.name + ".jpg",
    filtredMoon.coordinate,
    filtredMoon.rotationSpeed,
    filtredMoon.rotationDuration,
    filtredMoon.orbitSpeed,
    filtredMoon.orbitDuration,
    filtredMoon.meanTemperature
  );

  // Loop around all planets getted from the allPlanets data
  allPlanets.planets.forEach( element => {
    const filteredPlanet = horizonAPIFilter(element);
    const planet = generatePlanets(filteredPlanet);

    planet.planetarySystem = moon.mesh;

    planetList.push(planet);
  });


  
  await generateAsteroid(planetList);

  const renderer = new Renderer(document.getElementById('canvas'), planetList);

  const animate = () => {
    requestAnimationFrame(animate);
    renderer.animate();
  };
  animate();


  
}

/** 
* Generates planets with the planet class by using planet filtred 
* @param  filteredPlanet - Data from the planet that's filtred in amont
* @return planet object generated by the class
*/
function generatePlanets(filteredPlanet){
  const planet = new Planet(
    filteredPlanet.id,
    filteredPlanet.name,
    filteredPlanet.sizeRadius,
    filteredPlanet.name + ".jpg",
    filteredPlanet.coordinate,
    filteredPlanet.rotationSpeed,
    filteredPlanet.rotationDuration,
    filteredPlanet.orbitSpeed,
    filteredPlanet.orbitDuration,
    filteredPlanet.meanTemperature
  )
  return planet;
}

async function generateAsteroid(planetList){
  const gettedObjects = await GetAsteroid();
  let listOfAsteroids = []
  gettedObjects.forEach(element => {
      const asteroid = new Asteroid(
      element.id,
      element.name,
      element.estimated_diameter.kilometers.estimated_diameter_max,
      element.close_approach_data[0].close_approach_date_full,
      element.is_potentially_hazardous_asteroid,
      planetList.find(planet => planet.name == element.close_approach_data[0].orbiting_body),
      element.close_approach_data[0].miss_distance.kilometers
    )
    listOfAsteroids.push(asteroid);
  });
  return listOfAsteroids;
}


main();